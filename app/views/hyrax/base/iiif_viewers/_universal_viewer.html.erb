<%# override file ported from Hyrax master (slated for 3.x) @todo remove on upgrade to Hyrax 3.x %>
<%# @todo refactor or recreate volume (m), page (cv) argument passing %>
<div class="viewer-wrapper <%= "fullscreen" if local_assigns.fetch(:fullscreen, false) %>">
  <iframe
    src="<%= universal_viewer_base_url %>#?manifest=<%= main_app.polymorphic_url([main_app, :manifest, presenter], { locale: nil }) %>&config=<%= universal_viewer_config_url %>&m=<%= params[:m].to_i %>&cv=<%= params[:cv].to_i %>" 
    allowfullscreen="true" 
    frameborder="0" 
  ></iframe>
</div>

<%# Currently, only PagedResource work type supports searching catalog term within the UV on page load. %>
<%# Use highlight param set by Hyrax::PagedResourcesController#set_catalog_search_term_for_uv_search %>
<% if params[:highlight].present? %>
  <script>

    $(document).ready(function(){
      waitForUV();
    });

    <%# Wait until the UV search box elements are in place before trying to act upon its selectors. %>
    function waitForUV() {
        <%#
          Using requestAnimationFrame keeps us from having to write complicated polling or deferred logic.
          It is well-supported by all browsers as a way to smooth visual changes, like animations. It
          provides a way to automatically retry logic at the browser's display refresh rate.
        %>
        if (!$("iframe").contents().find(".searchTextContainer input").length) {
            window.requestAnimationFrame(waitForUV);
        }else {
              UVloaded();
        }
    }

    function UVloaded()
    {
      $("iframe").contents().find(".searchTextContainer input").val("<%= CGI.unescape(params[:highlight]) %>");
      $("iframe").contents().find(".searchTextContainer a")[0].click();
    }
  </script>
<% end %>
